package com.efive.pms.common;

import java.io.File;
import java.io.FileWriter;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.supercsv.cellprocessor.Optional;
import org.supercsv.cellprocessor.ift.CellProcessor;
import org.supercsv.io.CsvListWriter;
import org.supercsv.io.ICsvListWriter;
import org.supercsv.prefs.CsvPreference;

@Configuration
public class CSVExport {
	
	private static final Logger log = LoggerFactory.getLogger(CSVExport.class);
	
	@Autowired
	private ServletContext servletContext;
	
	@Autowired
	private DBUtils dbUtils; 

	@Autowired
	private DateAndTimeUtils dATUtils;
	
	@Autowired 
	private SimpleDateFormat dateFormat;
	  
	@Autowired 
	private SimpleDateFormat timeFormat;
	  
	@Autowired 
	private SimpleDateFormat dateTimeFormat;
	 
	/**
	 * Using SQL Query Export CSV File.
	 * @param columns header column names
	 * @param query SQL Query
	 * @param file_name File Name For Create New
	 * @param keysAndValues Parameter And Values
	 * @return File Absolute Path
	 * @throws Exception
	 */
	public String usingQuery(@NotNull String columns[],@NotNull String query,@NotNull String file_name,Map<String,Object> keysAndValues) 
			throws Exception{
		if(null == file_name || file_name.trim().length() == 0)
			throw new IllegalArgumentException("File Name Should Be Not Null And Empty");
		
		List<?> resultList = dbUtils.returnResultSet(query, keysAndValues);
		if(null!=resultList && !resultList.isEmpty()) {
			ICsvListWriter listWriter = null;
			
			String myPath = servletContext.getRealPath("/csv");
			String fileName = file_name + ".csv";
			
			File f = new File(myPath + File.separator + fileName);
			
			if(log.isDebugEnabled())
				log.debug("Download CSV File Absolute Path : {}",f.getAbsolutePath());
			
			File myPathFile = new File(myPath);
			
			if(!myPathFile.exists())
				myPathFile.mkdir();

			if (!f.exists())
				f.createNewFile();
			
			listWriter = new CsvListWriter(new FileWriter(f),CsvPreference.STANDARD_PREFERENCE);
			
			// write the header
            listWriter.writeHeader(columns);
            
            CellProcessor[] processors = new CellProcessor[columns.length];
            
            for (int i = 0; i < processors.length; i++) {
            	processors[i] = new Optional();
			}
			
			for (int i = 0;i<resultList.size();i++) {
				Object[] objects = (Object[])resultList.get(i);
				List<Object> aslist = new ArrayList<>();
				if(null!=objects && objects.length>0) {
					for (int j = 0;j<objects.length;j++) {
						Object objectType = objects[j]; 
						if(null!=objectType) { 
							if(objectType instanceof String || objectType instanceof Character) {
								
								String str = null != objectType ? objectType.toString() : "";
								aslist.add(str);
								if(log.isDebugEnabled()) {
									log.debug(" {} Types of String ", str);
								}
							} else if (objectType instanceof Timestamp) {

								java.util.Date javaDate = dATUtils.convertToJavaDate((Timestamp) objectType);
								aslist.add(dateTimeFormat.format(javaDate));
								if(log.isDebugEnabled()) {
									log.debug(" {} Types of Timestamp ", objectType);
								}
							} else if (objectType instanceof Time) {

								java.util.Date javaDate = dATUtils.convertToJavaDate((Time) objectType);
								aslist.add(timeFormat.format(javaDate));
								if(log.isDebugEnabled()) {
									log.debug(" {} Types of Time ", objectType);
								}
							} else if (objectType instanceof Date) {

								java.util.Date javaDate = dATUtils.convertToJavaDate((Date) objectType);
								aslist.add(dateFormat.format(javaDate));
								if(log.isDebugEnabled()) {
									log.debug(" {} Types of Date ", objectType);
								}
							} else if (objectType instanceof BigDecimal || objectType instanceof Byte
									|| objectType instanceof Short || objectType instanceof Integer
									|| objectType instanceof Long || objectType instanceof Float
									|| objectType instanceof Double) {
								
								aslist.add(((BigDecimal) objectType).doubleValue());
								if(log.isDebugEnabled()) {
									log.debug(" {} Types of Number ", objectType);
								}

							} else if (objectType instanceof Boolean) {
								aslist.add((Boolean) objectType);
								if(log.isDebugEnabled()) {
									log.debug(" {} Types of Boolean ", objectType);
								}
							} else {
								aslist.add("");
								
								if(log.isDebugEnabled()) {
									log.debug(" {} Types of Null ", objectType);
								}
							}
						} else {
							aslist.add("");
							if(log.isDebugEnabled()) {
								log.debug(" {} Types of Null ", objectType);
							}
						}
					}
				}
				listWriter.write(aslist, processors);
			}
			listWriter.close();
			return f.getAbsolutePath();
		}
		return null;
	}
}
